name: Build and Deploy

env:
  APP_NAME: frontend
  GCP_INSTANCE_IP: ${{ secrets.GCP_INSTANCE_IP }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGISTRY_REPO: ${{ secrets.GCP_REGISTRY_REPO }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  GCP_USERNAME: ${{ secrets.GCP_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure docker for Artifact Registry
        run: |
          gcloud --quiet auth configure-docker $GCP_REGION-docker.pkg.dev

      # TODO: Add more env
      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_DB_HOST=${{ secrets.NEXT_PUBLIC_DB_HOST }}" >> .env
          echo "NEXT_PUBLIC_MAP_KEY=${{ secrets.NEXT_PUBLIC_MAP_KEY }}" >> .env

      - name: Build and push Docker image
        run: |
          docker build -t $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_REGISTRY_REPO/$APP_NAME:latest .
          docker push $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_REGISTRY_REPO/$APP_NAME:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH client
        run: sudo apt-get install -y ssh

      - name: Set up SSH
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key

      - name: Deploy to GCP
        run: |
          ssh -o StrictHostKeyChecking=no \
            -i ssh_key \
            $GCP_USERNAME@$GCP_INSTANCE_IP \
            "
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker image prune -f
            "

      - name: Cleanup SSH key
        run: rm ssh_key
